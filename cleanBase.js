import sqlite3 from "sqlite3";

const db = new sqlite3.Database("crypto.db", (err) => {
  if (err) return console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –±–∞–∑–∏:", err.message);
  console.log("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö");
});

db.serialize(() => {
  db.all(`SELECT name FROM sqlite_master WHERE type='table'`, async (err, rows) => {
    if (err) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å:", err.message);
      return;
    }

    const tables = rows.map(r => r.name).filter(name => name !== "user_coins");

    if (tables.length === 0) {
      console.log("‚ÑπÔ∏è –ù–µ–º–∞—î —Ç–∞–±–ª–∏—Ü—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.");
      db.close();
      return;
    }

    console.log(`üóëÔ∏è –ó–Ω–∞–π–¥–µ–Ω–æ ${tables.length} —Ç–∞–±–ª–∏—Ü—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è...`);

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–æ–º—ñ—Å–∏ –¥–ª—è –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ
    for (const table of tables) {
      await new Promise((resolve) => {
        db.run(`DROP TABLE IF EXISTS ${table}`, (err) => {
          if (err) {
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ ${table}:`, err.message);
          } else {
            console.log(`‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ —Ç–∞–±–ª–∏—Ü—é: ${table}`);
          }
          resolve();
        });
      });
    }

    console.log("‚úÖ –£—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ, –∫—Ä—ñ–º 'user_coins', —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.");

    db.close((err) => {
      if (err) console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –±–∞–∑–∏:", err.message);
      else console.log("üîí –ë–∞–∑—É –¥–∞–Ω–∏—Ö –∑–∞–∫—Ä–∏—Ç–æ –±–µ–∑ –ø–æ–º–∏–ª–æ–∫.");
    });
  });
});
