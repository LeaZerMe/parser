import puppeteer from "puppeteer";
import axios from "axios";
import dotenv from "dotenv";
import fs from "fs";

dotenv.config();

const PROFILE_URL = process.env.PROFILE_URL || "https://x.com/trumpTruthOnX";
const BOT_TOKEN = process.env.BOT_TOKEN;
const CHAT_ID = process.env.ADMIN_ID;
const HEADLESS = (process.env.HEADLESS ?? "true") === "true";

// üîç –°–ª–æ–≤–∞, —è–∫—ñ —Ç—Ä–µ–±–∞ —à—É–∫–∞—Ç–∏ —É –ø–æ—Å—Ç–∞—Ö
const KEYWORDS = ["tarif", "china", "crypto", "#trump", "btc", "xi jinping"];

// üìÅ –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∂–µ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –ø–æ—Å—Ç—ñ–≤
const SAVED_POSTS_FILE = "posts.json";
let savedPosts = [];

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ—Å—Ç–∏, —è–∫—â–æ —Ñ–∞–π–ª —ñ—Å–Ω—É—î
if (fs.existsSync(SAVED_POSTS_FILE)) {
  try {
    savedPosts = JSON.parse(fs.readFileSync(SAVED_POSTS_FILE, "utf8"));
  } catch {
    savedPosts = [];
  }
}

function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

async function checkLatestPosts() {
  let browser;

  try {
    browser = await puppeteer.launch({
      headless: HEADLESS,
      args: ["--no-sandbox", "--disable-setuid-sandbox"],
    });

    const page = await browser.newPage();

    await page.setUserAgent(
      "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120 Safari/537.36"
    );

    console.log(`üåê –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ ${PROFILE_URL}...`);
    await page.goto(PROFILE_URL, { waitUntil: "domcontentloaded", timeout: 60000 });

    await sleep(5000); // –¥–∞—î–º–æ X —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏—Å—å

    // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç—ñ–≤ (—Ç–µ–∫—Å—Ç + –¥–∞—Ç–∞)
    const posts = await page.evaluate(() => {
      const articles = Array.from(document.querySelectorAll("article"));
      return articles.map((article) => {
        const textEl = article.querySelector("div[lang]");
        const dateEl = article.querySelector("time");
        return {
          text: textEl?.innerText?.trim() || "",
          date: dateEl?.getAttribute("datetime") || null,
        };
      }).filter(p => p.text);
    });

    if (!posts.length) {
      console.log("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç—ñ–≤. –ú–æ–∂–ª–∏–≤–æ, –ø–æ—Ç—Ä—ñ–±–µ–Ω –ª–æ–≥—ñ–Ω.");
      return;
    }

    let newFound = 0;

    for (const post of posts) {
      const { text, date } = post;
      const id = text.slice(0, 100); // —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è

      // –Ø–∫—â–æ —Ü–µ–π –ø–æ—Å—Ç –≤–∂–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
      if (savedPosts.some((p) => p.id === id)) continue;

      // –Ø–∫—â–æ –º—ñ—Å—Ç–∏—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Å–ª–æ–≤–∞
      const hasKeyword = KEYWORDS.some((word) =>
        text.toLowerCase().includes(word.toLowerCase())
      );

      if (hasKeyword) {
        console.log("üÜï –ó–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–∏–π –ø–æ—Å—Ç:");
        console.log(`üìÖ ${date}`);
        console.log(text);
        console.log("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");

        // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤ Telegram
        if (BOT_TOKEN && CHAT_ID) {
          await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
            chat_id: CHAT_ID,
            text: `üê¶ –ù–æ–≤–∏–π –ø–æ—Å—Ç —ñ–∑ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º:\n\nüìÖ ${date}\n\n${text}`,
          });
        }
      }

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å—Ç —É —Å–ø–∏—Å–æ–∫
      savedPosts.push({ id, text, date });
      newFound++;
    }

    if (newFound > 0) {
      fs.writeFileSync(SAVED_POSTS_FILE, JSON.stringify(savedPosts, null, 2), "utf8");
      console.log(`üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ ${newFound} –Ω–æ–≤–∏—Ö –ø–æ—Å—Ç—ñ–≤.`);
    } else {
      console.log("‚è≥ –ù–æ–≤–∏—Ö –ø–æ—Å—Ç—ñ–≤ –∞–±–æ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
    }
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ Puppeteer:", err.message);
  } finally {
    if (browser) await browser.close();
  }
}

console.log(`üîç –ü–æ—á–∏–Ω–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥: ${PROFILE_URL}`);
await checkLatestPosts(); // –ø–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫
setInterval(checkLatestPosts, 60 * 1000); // –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
