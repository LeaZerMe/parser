import { Telegraf, Markup, session } from "telegraf";
import axios from "axios";
import Database from "better-sqlite3";
import dotenv from "dotenv";
dotenv.config();


// 1Ô∏è‚É£ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
const bot = new Telegraf(process.env.BOT_TOKEN);

// üß† Session middleware
bot.use(session({
    defaultSession: () => ({
        mode: null,
    }),
}));

// üß± –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –±–∞–∑–∏
const db = new Database("crypto.db");

// 2Ô∏è‚É£ –¢–∞–±–ª–∏—Ü—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –º–æ–Ω–µ—Ç–∞–º–∏
db.prepare(`
  CREATE TABLE IF NOT EXISTS user_coins (
    user_id INTEGER,
    coin TEXT,
    PRIMARY KEY (user_id, coin)
  )
`).run();

db.prepare(`
  CREATE TABLE IF NOT EXISTS sent_messages (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    coin TEXT,
    message TEXT,
    timestamp INTEGER
  )
`).run();

// 3Ô∏è‚É£ –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –º–æ–Ω–µ—Ç–∏
function createCoinTable(symbol) {
    const cleanSymbol = symbol.replace(/[^a-zA-Z0-9_]/g, "");
    db.prepare(`
    CREATE TABLE IF NOT EXISTS ${cleanSymbol} (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      price REAL,
      change_1h REAL,
      change_24h REAL,
      ts INTEGER
    )
  `).run();
}

// 4Ô∏è‚É£ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–æ –º–æ–Ω–µ—Ç—ñ
async function getCoinData(userInput) {
    const name = userInput.trim().toLowerCase();
    const { data: list } = await axios.get("https://api.coingecko.com/api/v3/coins/list");

    const coinInfo = list.find(
        (c) =>
            c.id.toLowerCase() === name ||
            c.symbol.toLowerCase() === name ||
            c.name.toLowerCase() === name
    );

    if (!coinInfo) throw new Error("–ú–æ–Ω–µ—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞");

    const url = `https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=${coinInfo.id}&price_change_percentage=1h,24h`;
    const { data } = await axios.get(url);
    const c = data[0];
    if (!c) throw new Error("–ú–æ–Ω–µ—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");

    return {
        name: c.name,
        symbol: c.symbol.toLowerCase(),
        price: c.current_price,
        change_1h: c.price_change_percentage_1h_in_currency,
        change_24h: c.price_change_percentage_24h,
    };
}

// 5Ô∏è‚É£ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É –±–∞–∑—É
function saveCoinData(symbol, data) {
    const cleanSymbol = symbol.replace(/[^a-zA-Z0-9_]/g, "");
    createCoinTable(cleanSymbol);
    db.prepare(
        `INSERT INTO ${cleanSymbol} (price, change_1h, change_24h, ts)
     VALUES (?, ?, ?, ?)`
    ).run(
        data.price,
        data.change_1h,
        data.change_24h,
        Date.now()
    );
}

// 6Ô∏è‚É£ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
const mainMenu = Markup.inlineKeyboard([
    [Markup.button.callback("üìä –¢–æ–ø-10 –º–æ–Ω–µ—Ç", "top10")],
    [Markup.button.callback("‚ûï –î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É", "add_coin")],
    [Markup.button.callback("üìã –ú–æ—ó –º–æ–Ω–µ—Ç–∏", "my_coins")],
]);

// 7Ô∏è‚É£ /start
bot.start((ctx) => {
    ctx.session.mode = null;
    ctx.reply("üëã –ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ:", mainMenu);
});

// 8Ô∏è‚É£ –ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–æ–ø-10
bot.action("top10", async (ctx) => {
    await ctx.answerCbQuery();
    const url =
        "https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=10&price_change_percentage=1h,24h";
    const { data } = await axios.get(url);
    let msg = "üíé <b>–¢–æ–ø-10 –º–æ–Ω–µ—Ç</b>\n\n";
    data.forEach((c, i) => {
        msg += `${i + 1}. <b>${c.name}</b> (${c.symbol.toUpperCase()})\n`;
        msg += `üí∞ –¶—ñ–Ω–∞: $${c.current_price}\n`;
        msg += `‚è± 1h: ${c.price_change_percentage_1h_in_currency?.toFixed(2)}%\n`;
        msg += `üìÜ 24h: ${c.price_change_percentage_24h?.toFixed(2)}%\n\n`;
    });
    ctx.reply(msg, { parse_mode: "HTML" });
});

// 9Ô∏è‚É£ –î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É
bot.action("add_coin", async (ctx) => {
    await ctx.answerCbQuery();
    ctx.session.mode = "add_coin";
    ctx.reply("–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –º–æ–Ω–µ—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: bitcoin):");
});

// üîü –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É (–¥–æ–¥–∞–≤–∞–Ω–Ω—è –º–æ–Ω–µ—Ç–∏)
bot.on("text", async (ctx) => {
    if (ctx.session.mode === "add_coin") {
        const coin = ctx.message.text.trim().toLowerCase();
        try {
            const data = await getCoinData(coin);
            saveCoinData(coin, data);

            db.prepare(
                "INSERT OR IGNORE INTO user_coins (user_id, coin) VALUES (?, ?)"
            ).run(ctx.from.id, coin);

            ctx.reply(
                `‚úÖ –ú–æ–Ω–µ—Ç—É <b>${coin.toUpperCase()}</b> –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞—à–æ–≥–æ —Å–ø–∏—Å–∫—É.`,
                { parse_mode: "HTML", ...mainMenu }
            );
        } catch (e) {
            ctx.reply("‚ö†Ô∏è –ú–æ–Ω–µ—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.");
        }
        ctx.session.mode = null;
    }
});

// 1Ô∏è‚É£1Ô∏è‚É£ –ú–æ—ó –º–æ–Ω–µ—Ç–∏
bot.action("my_coins", async (ctx) => {
    await ctx.answerCbQuery();
    const coins = db
        .prepare("SELECT coin FROM user_coins WHERE user_id = ?")
        .all(ctx.from.id);

    if (coins.length === 0) {
        return ctx.reply("–£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î –º–æ–Ω–µ—Ç üòø", mainMenu);
    }

    const buttons = coins.map((c) => [
        Markup.button.callback(c.coin.toUpperCase(), `coin_${c.coin}`),
    ]);
    ctx.reply("üìã –¢–≤–æ—ó –º–æ–Ω–µ—Ç–∏:", Markup.inlineKeyboard(buttons));
});

// 1Ô∏è‚É£2Ô∏è‚É£ –ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –º–æ–Ω–µ—Ç—ñ
bot.action(/coin_(.+)/, async (ctx) => {
    const coin = ctx.match[1];
    await ctx.answerCbQuery();
    try {
        const data = await getCoinData(coin);
        saveCoinData(coin, data);
        const msg =
            `üí∞ <b>${data.name}</b> (${data.symbol.toUpperCase()})\n` +
            `–¶—ñ–Ω–∞: $${data.price}\n` +
            `‚è± 1h: ${data.change_1h?.toFixed(2)}%\n` +
            `üìÜ 24h: ${data.change_24h?.toFixed(2)}%`;
        ctx.reply(msg, { parse_mode: "HTML" });
    } catch {
        ctx.reply("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ.");
    }
});

// bot.launch();
console.log("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!");

// üß† –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –º–æ–∂–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
function canSendMessage(coin) {
  const oneHourAgo = Date.now() - 60 * 60 * 1000;
  const count = db
    .prepare(
      "SELECT COUNT(*) AS total FROM sent_messages WHERE coin = ? AND timestamp >= ?"
    )
    .get(coin, oneHourAgo).total;
  return count < 3; // –º–∞–∫—Å–∏–º—É–º 3 –∑–∞ –≥–æ–¥–∏–Ω—É
}

// üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
function saveMessage(coin, message) {
  db.prepare(
    "INSERT INTO sent_messages (coin, message, timestamp) VALUES (?, ?, ?)"
  ).run(coin, message, Date.now());
}

// üßπ –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ (—Å—Ç–∞—Ä—à–∏—Ö –∑–∞ 24 –≥–æ–¥)
function cleanupOldMessages() {
  db.prepare(
    "DELETE FROM sent_messages WHERE timestamp < ?"
  ).run(Date.now() - 24 * 60 * 60 * 1000);
}

// üîÅ –§—É–Ω–∫—Ü—ñ—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∑–º—ñ–Ω —Ü—ñ–Ω
async function monitorCoins() {
  try {
    console.log("‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–Ω...");

    // 1Ô∏è‚É£ –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–ø-30 –º–æ–Ω–µ—Ç (–∑ % –∑–º—ñ–Ω)
    const topUrl =
      "https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=30&price_change_percentage=1h,24h";
    const { data: topCoins } = await axios.get(topUrl);

    // 2Ô∏è‚É£ –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –º–æ–Ω–µ—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    const userCoins = db.prepare("SELECT DISTINCT coin FROM user_coins").all();
    const userCoinNames = userCoins.map((c) => c.coin.toLowerCase());

    // 3Ô∏è‚É£ –û–±‚Äô—î–¥–Ω—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –º–æ–Ω–µ—Ç–∏
    const allCoinIds = [
      ...new Set([...topCoins.map((c) => c.id), ...userCoinNames]),
    ];

    // 4Ô∏è‚É£ –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø–æ –≤—Å—ñ—Ö –º–æ–Ω–µ—Ç–∞—Ö
    const { data } = await axios.get(
      `https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=${allCoinIds.join(
        ","
      )}&price_change_percentage=1h,24h`
    );

    let messageHeaderSent = false;

    // 5Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—É –º–æ–Ω–µ—Ç—É
    for (const coin of data) {
      const cleanSymbol = coin.id.replace(/[^a-zA-Z0-9_]/g, "");
      createCoinTable(cleanSymbol);

      // –ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ
      const now = {
        price: coin.current_price,
        change_1h: coin.price_change_percentage_1h_in_currency,
        change_24h: coin.price_change_percentage_24h_in_currency,
        ts: Date.now(),
      };

      saveCoinData(cleanSymbol, now);

      // 6Ô∏è‚É£ –ë–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 5 –∑–∞–ø–∏—Å—ñ–≤ –∑–∞ 5 —Ö–≤
      const pastRecords = db
        .prepare(
          `SELECT price, ts 
           FROM ${cleanSymbol} 
           WHERE ts >= ? 
           ORDER BY ts DESC 
           LIMIT 5`
        )
        .all(Date.now() - 5 * 60 * 1000);

      if (pastRecords.length === 0) continue;

      // 7Ô∏è‚É£ –®—É–∫–∞—î–º–æ –Ω–∞–π–±—ñ–ª—å—à—É –∑–º—ñ–Ω—É
      let maxChange = 0;
      let pastMax = null;

      for (const past of pastRecords) {
        const change = ((now.price - past.price) / past.price) * 100;
        if (Math.abs(change) > Math.abs(maxChange)) {
          maxChange = change;
          pastMax = past;
        }
      }

      // 8Ô∏è‚É£ –Ø–∫—â–æ –∑–º—ñ–Ω–∞ –ø–µ—Ä–µ–≤–∏—â—É—î –ø–æ—Ä—ñ–≥ ‚Äî –Ω–∞–¥—Å–∏–ª–∞—î–º–æ
      if (
        pastMax &&
        (Math.abs(maxChange) >= process.env.PRICE_CHANGE_THRESHOLD ||
          Math.abs(now.change_1h) >= process.env.PRICE_CHANGE_THRESHOLD)
      ) {
        const userId = process.env.ADMIN_ID;

        // üö´ –õ—ñ–º—ñ—Ç 3 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è/–≥–æ–¥
        if (!canSendMessage(coin.id)) {
          console.log(`‚è∏ –ü—Ä–æ–ø—É—â–µ–Ω–æ ${coin.id} ‚Äî –ª—ñ–º—ñ—Ç 3 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è/–≥–æ–¥.`);
          continue;
        }

        if (!messageHeaderSent) {
          await bot.telegram.sendMessage(userId, "üìä <b>PRICE CHANGE</b>", {
            parse_mode: "HTML",
          });
          messageHeaderSent = true;
        }

        const minutesAgo = Math.round((now.ts - pastMax.ts) / 60000);
        const msgText =
          `üö® <b>${coin.name}</b> (${coin.symbol.toUpperCase()})\n` +
          `üìâ –°—Ç–∞—Ä–∞ —Ü—ñ–Ω–∞: $${pastMax.price}\n` +
          `üìà –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: $${now.price}\n` +
          `‚è± –ó–º—ñ–Ω–∞: ${maxChange.toFixed(2)}% –∑–∞ ${minutesAgo} —Ö–≤.\n` +
          `‚è≥ 1h: ${now.change_1h?.toFixed(2)}%\n` +
          `üìÜ 24h: ${now.change_24h?.toFixed(2)}%`;

        await bot.telegram.sendMessage(userId, msgText, { parse_mode: "HTML" });

        // üíæ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±–∞–∑—É
        saveMessage(coin.id, msgText);
      }
    }

    cleanupOldMessages();
    console.log("‚úÖ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:", err.message);
  }
}

// üïí –ó–∞–ø—É—Å–∫ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
setInterval(monitorCoins, 60 * 1000);

// üöÄ –ü–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
monitorCoins();
